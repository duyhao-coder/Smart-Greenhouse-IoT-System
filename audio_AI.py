import sys
from Adafruit_IO import MQTTClient
from transformers import pipeline
import time
import sounddevice as sd
import scipy.io.wavfile as wav

# ----------- C·∫§U H√åNH ADAFRUIT -------------
AIO_FEED_ID = "AI"
AIO_USERNAME = "add nam"   
AIO_KEY = "add key"         

# ----------- K·∫æT N·ªêI MQTT -------------
def connected(client):
    print("K·∫øt n·ªëi th√†nh c√¥ng!")
    client.subscribe(AIO_FEED_ID)

def subscribe(client, userdata, mid, granted_qos):
    print("ƒê√£ subscribe t·ªõi feed:", AIO_FEED_ID)

def disconnected(client):
    print("M·∫•t k·∫øt n·ªëi v·ªõi Adafruit IO.")
    sys.exit(1)

def message(client, feed_id, payload):
    print(f"Nh·∫≠n d·ªØ li·ªáu t·ª´ Adafruit: {payload}")

client = MQTTClient(AIO_USERNAME, AIO_KEY)
client.on_connect = connected
client.on_disconnect = disconnected
client.on_message = message
client.on_subscribe = subscribe
client.connect()
client.loop_background()

# ----------- M√î H√åNH NH·∫¨N D·∫†NG GI·ªåNG N√ìI -------------
transcriber = pipeline(
    "automatic-speech-recognition",
    model="vinai/PhoWhisper-small",
    device=-1
)
def record_audio(filename="audio.wav", duration=10, samplerate=16000):
    print(f" ƒêang ghi √¢m trong {duration} gi√¢y...")
    recording = sd.rec(int(duration * samplerate), samplerate=samplerate, channels=1, dtype='int16')
    sd.wait()
    wav.write(filename, samplerate, recording)
    print(f" Ghi √¢m xong. L∆∞u t·∫°i: {filename}")

def transcribe(filename="audio.wav"):
    print(" ƒêang x·ª≠ l√Ω √¢m thanh...")
    result = transcriber(filename)
    text = result["text"].lower()
    print(" VƒÉn b·∫£n nh·∫≠n ƒë∆∞·ª£c:", text)
    return text

# ----------- X·ª¨ L√ù ƒêI·ªÄU KHI·ªÇN -------------
def handle_command(text):
    if "b·∫≠t" in text and "m√°y b∆°m" in text:
        print("L·ªánh: B·∫¨T m√°y b∆°m")
        client.publish(AIO_FEED_ID, "on")
    elif "t·∫Øt" in text and "m√°y b∆°m" in text:
        print("L·ªánh: T·∫ÆT m√°y b∆°m")
        client.publish(AIO_FEED_ID, "off")
    else:
        print("Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c l·ªánh ph√π h·ª£p.")

# ----------- MAIN -------------
if __name__ == "__main__":
    record_audio("audio.wav", duration=5)
    text = transcribe("output1.wav")
    handle_command(text)
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nüîå ƒê√£ ng·∫Øt k·∫øt n·ªëi.")
# from pydub import AudioSegment

# # ƒê·ªçc file AAC
# audio = AudioSegment.from_file("2.aac", format="aac")

# # Xu·∫•t ra WAV 
# audio.export("output1.wav", format="wav")

# print("‚úÖ ƒê√£ chuy·ªÉn AAC th√†nh WAV")
